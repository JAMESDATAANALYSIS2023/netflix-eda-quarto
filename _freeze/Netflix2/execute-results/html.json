{
  "hash": "8fb74e43a55307201f3064663d928766",
  "result": {
    "markdown": "---\ntitle: 'Project 1: Netflix Movie Trends in the 1990s'\nformat: html\nexecute: \n  \n  kernel: python3\n  engine: jupyter\n---\n\n## Objective\nAnalyze Netflix movie data to uncover patterns in movie durations and genre trends during the 1990s.\n\n## Tools Used\n- **Python Libraries**: pandas, matplotlib\n- **Techniques**: Data filtering, type conversion, value counts, histogram visualization\n\n## Key Questions\n1. What was the most common movie duration in the 1990s?\n2. How many short action movies (< 90 minutes) were released in that decade?\n\n## Summary of Findings\n- The most frequent duration was **94 minutes**, showing a standard movie length for the 1990s.\n- Only **7 short action movies** were released in that time period, indicating a preference for longer runtimes in that genre.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# import Python librairies\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# load the netflix data set as pandas data frame\nNetflix = pd.read_csv(\"netflix_data.csv\")\n```\n:::\n\n\n1.0 Data Preview and Inspection\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# to see first 5 columns of data frame\nNetflix.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>show_id</th>\n      <th>type</th>\n      <th>title</th>\n      <th>director</th>\n      <th>cast</th>\n      <th>country</th>\n      <th>date_added</th>\n      <th>release_year</th>\n      <th>duration</th>\n      <th>description</th>\n      <th>genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>s2</td>\n      <td>Movie</td>\n      <td>7:19</td>\n      <td>Jorge Michel Grau</td>\n      <td>Demián Bichir, Héctor Bonilla, Oscar Serrano, ...</td>\n      <td>Mexico</td>\n      <td>December 23, 2016</td>\n      <td>2016</td>\n      <td>93</td>\n      <td>After a devastating earthquake hits Mexico Cit...</td>\n      <td>Dramas</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>s3</td>\n      <td>Movie</td>\n      <td>23:59</td>\n      <td>Gilbert Chan</td>\n      <td>Tedd Chan, Stella Chung, Henley Hii, Lawrence ...</td>\n      <td>Singapore</td>\n      <td>December 20, 2018</td>\n      <td>2011</td>\n      <td>78</td>\n      <td>When an army recruit is found dead, his fellow...</td>\n      <td>Horror Movies</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>s4</td>\n      <td>Movie</td>\n      <td>9</td>\n      <td>Shane Acker</td>\n      <td>Elijah Wood, John C. Reilly, Jennifer Connelly...</td>\n      <td>United States</td>\n      <td>November 16, 2017</td>\n      <td>2009</td>\n      <td>80</td>\n      <td>In a postapocalyptic world, rag-doll robots hi...</td>\n      <td>Action</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>s5</td>\n      <td>Movie</td>\n      <td>21</td>\n      <td>Robert Luketic</td>\n      <td>Jim Sturgess, Kevin Spacey, Kate Bosworth, Aar...</td>\n      <td>United States</td>\n      <td>January 1, 2020</td>\n      <td>2008</td>\n      <td>123</td>\n      <td>A brilliant group of students become card-coun...</td>\n      <td>Dramas</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>s6</td>\n      <td>TV Show</td>\n      <td>46</td>\n      <td>Serdar Akar</td>\n      <td>Erdal Beşikçioğlu, Yasemin Allen, Melis Birkan...</td>\n      <td>Turkey</td>\n      <td>July 1, 2017</td>\n      <td>2016</td>\n      <td>1</td>\n      <td>A genetics professor experiments with a treatm...</td>\n      <td>International TV</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# to see last 5 columns of data frame\nNetflix.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>show_id</th>\n      <th>type</th>\n      <th>title</th>\n      <th>director</th>\n      <th>cast</th>\n      <th>country</th>\n      <th>date_added</th>\n      <th>release_year</th>\n      <th>duration</th>\n      <th>description</th>\n      <th>genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4807</th>\n      <td>s7779</td>\n      <td>Movie</td>\n      <td>Zombieland</td>\n      <td>Ruben Fleischer</td>\n      <td>Jesse Eisenberg, Woody Harrelson, Emma Stone, ...</td>\n      <td>United States</td>\n      <td>November 1, 2019</td>\n      <td>2009</td>\n      <td>88</td>\n      <td>Looking to survive in a world taken over by zo...</td>\n      <td>Comedies</td>\n    </tr>\n    <tr>\n      <th>4808</th>\n      <td>s7781</td>\n      <td>Movie</td>\n      <td>Zoo</td>\n      <td>Shlok Sharma</td>\n      <td>Shashank Arora, Shweta Tripathi, Rahul Kumar, ...</td>\n      <td>India</td>\n      <td>July 1, 2018</td>\n      <td>2018</td>\n      <td>94</td>\n      <td>A drug dealer starts having doubts about his t...</td>\n      <td>Dramas</td>\n    </tr>\n    <tr>\n      <th>4809</th>\n      <td>s7782</td>\n      <td>Movie</td>\n      <td>Zoom</td>\n      <td>Peter Hewitt</td>\n      <td>Tim Allen, Courteney Cox, Chevy Chase, Kate Ma...</td>\n      <td>United States</td>\n      <td>January 11, 2020</td>\n      <td>2006</td>\n      <td>88</td>\n      <td>Dragged from civilian life, a former superhero...</td>\n      <td>Children</td>\n    </tr>\n    <tr>\n      <th>4810</th>\n      <td>s7783</td>\n      <td>Movie</td>\n      <td>Zozo</td>\n      <td>Josef Fares</td>\n      <td>Imad Creidi, Antoinette Turk, Elias Gergi, Car...</td>\n      <td>Sweden</td>\n      <td>October 19, 2020</td>\n      <td>2005</td>\n      <td>99</td>\n      <td>When Lebanon's Civil War deprives Zozo of his ...</td>\n      <td>Dramas</td>\n    </tr>\n    <tr>\n      <th>4811</th>\n      <td>s7784</td>\n      <td>Movie</td>\n      <td>Zubaan</td>\n      <td>Mozez Singh</td>\n      <td>Vicky Kaushal, Sarah-Jane Dias, Raaghav Chanan...</td>\n      <td>India</td>\n      <td>March 2, 2019</td>\n      <td>2015</td>\n      <td>111</td>\n      <td>A scrappy but poor boy worms his way into a ty...</td>\n      <td>Dramas</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# To see column: missing values in each column, column data type, and memory usage.\nNetflix.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4812 entries, 0 to 4811\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype \n---  ------        --------------  ----- \n 0   show_id       4812 non-null   object\n 1   type          4812 non-null   object\n 2   title         4812 non-null   object\n 3   director      4812 non-null   object\n 4   cast          4812 non-null   object\n 5   country       4812 non-null   object\n 6   date_added    4812 non-null   object\n 7   release_year  4812 non-null   int64 \n 8   duration      4812 non-null   int64 \n 9   description   4812 non-null   object\n 10  genre         4812 non-null   object\ndtypes: int64(2), object(9)\nmemory usage: 413.7+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Generate summary statistics for all numeric columns in the Netflix DataFrame\nNetflix.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>release_year</th>\n      <th>duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4812.000000</td>\n      <td>4812.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2012.711554</td>\n      <td>99.566708</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>9.517978</td>\n      <td>30.889305</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1942.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2011.000000</td>\n      <td>88.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2016.000000</td>\n      <td>99.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2018.000000</td>\n      <td>116.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2021.000000</td>\n      <td>253.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# calculated the percentage of missing values per column \nmissing_pct = (Netflix.isnull().sum() / len(Netflix)) * 100\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Display the percentage of missing values count for each column: filter only columns with missing values, but since the result is an empty Series\nmissing_pct = missing_pct[missing_pct > 0].sort_values(ascending=False).round(2) \nprint(missing_pct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries([], dtype: float64)\n```\n:::\n:::\n\n\nData types and conversion\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Display the data type of each column in the Netflix DataFrame\nNetflix.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nshow_id         object\ntype            object\ntitle           object\ndirector        object\ncast            object\ncountry         object\ndate_added      object\nrelease_year     int64\nduration         int64\ndescription     object\ngenre           object\ndtype: object\n```\n:::\n:::\n\n\nConvert data_added to date variable\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Convert the \"date_added\" column to datetime format; invalid entries are set to NaT (Not a Time)\nNetflix[\"date_added\"] = pd.to_datetime(Netflix[\"date_added\"], errors=\"coerce\")\n```\n:::\n\n\nCategorical EDA\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Return a pandas series: Count the frequency of each unique category in the \"type\" column.\nNetflix[\"type\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ntype\nMovie      4677\nTV Show     135\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsns.countplot(data= Netflix, x=\"type\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Netflix2_files/figure-html/cell-13-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Return a pandas series: Count the proportion of each unique category in the \"type\" column.\nNetflix[\"type\"].value_counts(normalize=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ntype\nMovie      0.971945\nTV Show    0.028055\nName: proportion, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nNetflix[\"country\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\ncountry\nUnited States     1886\nIndia              864\nUnited Kingdom     311\nCanada             155\nFrance             133\n                  ... \nGuatemala            1\nJamaica              1\nParaguay             1\nSomalia              1\nCroatia              1\nName: count, Length: 72, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nNetflix[\"country\"].value_counts(normalize=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\ncountry\nUnited States     0.391937\nIndia             0.179551\nUnited Kingdom    0.064630\nCanada            0.032211\nFrance            0.027639\n                    ...   \nGuatemala         0.000208\nJamaica           0.000208\nParaguay          0.000208\nSomalia           0.000208\nCroatia           0.000208\nName: proportion, Length: 72, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprint(Netflix[\"country\"].nunique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n72\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nNetflix[\"genre\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\ngenre\nDramas                  1343\nComedies                1029\nAction                   696\nChildren                 421\nDocumentaries            352\nStand-Up                 283\nHorror Movies            239\nInternational Movies     100\nClassic Movies            69\nThrillers                 49\nInternational TV          39\nCrime TV                  30\nUncategorized             25\nBritish TV                20\nIndependent Movies        20\nAnime Features            18\nMusic                     14\nCult Movies               11\nSci-Fi                    11\nKids                      10\nAnime Series               9\nDocuseries                 7\nTV Shows                   4\nRomantic Movies            3\nTV Comedies                3\nTV Action                  2\nRomantic TV                1\nTV Horror                  1\nClassic                    1\nReality TV                 1\nLGBTQ Movies               1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nNetflix[\"genre\"].value_counts(normalize=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ngenre\nDramas                  0.279094\nComedies                0.213840\nAction                  0.144638\nChildren                0.087490\nDocumentaries           0.073150\nStand-Up                0.058811\nHorror Movies           0.049667\nInternational Movies    0.020781\nClassic Movies          0.014339\nThrillers               0.010183\nInternational TV        0.008105\nCrime TV                0.006234\nUncategorized           0.005195\nBritish TV              0.004156\nIndependent Movies      0.004156\nAnime Features          0.003741\nMusic                   0.002909\nCult Movies             0.002286\nSci-Fi                  0.002286\nKids                    0.002078\nAnime Series            0.001870\nDocuseries              0.001455\nTV Shows                0.000831\nRomantic Movies         0.000623\nTV Comedies             0.000623\nTV Action               0.000416\nRomantic TV             0.000208\nTV Horror               0.000208\nClassic                 0.000208\nReality TV              0.000208\nLGBTQ Movies            0.000208\nName: proportion, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nprint(Netflix[\"genre\"].nunique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n31\n```\n:::\n:::\n\n\nFilter Movies to the 1990s\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Filter Movies to the 1990s\nmovies_df = Netflix[Netflix[\"type\"] == \"Movie\"].copy()\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Filter movies released in the 1990s\nmovies_90s = movies_df[(movies_df[\"release_year\"] >= 1990) & (movies_df[\"release_year\"] < 2000)]\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Visualize the distribution of movie durations\nplt.hist(movies_90s[\"duration\"])\nplt.title(\"Distribution of Movie Durations (1990s)\")\nplt.xlabel(\"Duration (minutes)\")\nplt.ylabel(\"Number of Movies\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Netflix2_files/figure-html/cell-23-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nmin_date = movies_90s[\"release_year\"].min()\nmax_date = movies_90s[\"release_year\"].max()\nprint(min_date)\nprint(max_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1990\n1999\n```\n:::\n:::\n\n\nAnswer Question 1: Most Frequent Movie Duration\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Find the most frequent duration\nduration = movies_90s[\"duration\"].mode()[0]  # mode returns a Series, so take the first\nprint(\"Most frequent duration:\", duration)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMost frequent duration: 94\n```\n:::\n:::\n\n\nInterpretation:\n\nA duration of 94 minutes suggests that typical 1990s films leaned toward a standard feature-length format — long enough for storytelling but concise enough for wide audience appeal.\n\nThis insight aligns with industry patterns from that era, where movies often ranged between 90–120 minutes.\n\nAnswer Question 2: Count Short Action Movies < 90 min\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# Filter Action movies from the 1990s\nshort_action = movies_90s[(movies_90s[\"genre\"] == \"Action\") & (movies_90s[\"duration\"] < 90)]\n\n# Count how many Action movies had a duration under 90 minutes\nshort_action_count = (short_action[\"duration\"] < 90).sum()\n\n#short_movie_count = short_action.shape[0]\nprint(\"Short Action Movies:\", short_action_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShort Action Movies: 7\n```\n:::\n:::\n\n\nInterpretation:\n\nAction movies during the 1990s were generally longer than 90 minutes, likely due to their complex plots, action sequences, and production style.\n\nThe relatively small number (7 out of all action movies) implies that short-form action content was rare, possibly limited to niche markets or lower-budget productions.\n\n## Insights\n\n- A majority of 1990s Netflix movies are around **94 minutes**, suggesting a consistent production format.\n- **Action** movies during the same decade were **rarely shorter than 90 minutes**, hinting at genre-driven runtime requirements.\n\n---\n\n## Next Steps\n\n- Extend the analysis to other genres or time periods (2000s, 2010s)\n- Add more complex filters (e.g., by country or rating)\n- Consider clustering movies by duration + genre + country for pattern discovery (Project 2)\n\n---\n\n## Portfolio Use\n\nThis project demonstrates ability to:\n- Clean and preprocess a real-world dataset\n- Apply basic statistics and visualization\n- Answer business-relevant questions using data\n\n",
    "supporting": [
      "Netflix2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}