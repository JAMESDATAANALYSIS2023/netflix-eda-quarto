{
  "hash": "a4f2cfa4827d2eab27ce29961d7ac8e2",
  "result": {
    "markdown": "---\ntitle: Numerical_eda\nformat: html\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# This code imports the os as a module to interact with the operating system\nimport os\n\n# To display the current working directory to identity where Python is excecuting the scripts.\nprint(\"Current working directory:\", os.getcwd())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCurrent working directory: C:\\Users\\jgpet\\OneDrive\\Desktop\\DATA ANALYST\\Data Analytic Portfolio\\Lets make Musicupdated\\Featured projects\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Change the working directory to the folder containing the file\nos.chdir(r\"C:\\Users\\jgpet\\OneDrive\\Desktop\\Gradiate school\\2025\\DSCI 5240\\Final Project\")\n\n# Verify the change\nprint(\"New working directory:\", os.getcwd())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNew working directory: C:\\Users\\jgpet\\OneDrive\\Desktop\\Gradiate school\\2025\\DSCI 5240\\Final Project\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Load data file inot python as a pandas data frame\n# Load data into Data frame using row 1 as the header\nFinal_project = pd.read_csv(\"DSCI 5240 Project Data.csv\", header=0)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Ensure all columns are displayed in a table format\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.width\", 1000)\npd.set_option(\"display.colheader_justify\", \"center\")\n\nFinal_project.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Water Pump ID</th>\n      <th>Water Source Type</th>\n      <th>Water Quality</th>\n      <th>Distance to Nearest Town</th>\n      <th>Population Served</th>\n      <th>Installation Year</th>\n      <th>Funder</th>\n      <th>Payment Type</th>\n      <th>Water Pump Age</th>\n      <th>Pump Type</th>\n      <th>GPS Coordinates</th>\n      <th>Functioning Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>WP001</td>\n      <td>Well</td>\n      <td>Clean</td>\n      <td>44.0</td>\n      <td>13000.0</td>\n      <td>2006.0</td>\n      <td>World Bank</td>\n      <td>Free</td>\n      <td>18.0</td>\n      <td>Motorized Pump</td>\n      <td>(-20.599463060030295, 26.696000047794744)</td>\n      <td>Functioning</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>WP002</td>\n      <td>Lake</td>\n      <td>Clean</td>\n      <td>13.0</td>\n      <td>13000.0</td>\n      <td>1990.0</td>\n      <td>Red Cross</td>\n      <td>Free</td>\n      <td>34.0</td>\n      <td>Hand Pump</td>\n      <td>(-20.69129769992364, 23.313405231404484)</td>\n      <td>Not Functioning</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>WP003</td>\n      <td>Lake</td>\n      <td>Clean</td>\n      <td>27.0</td>\n      <td>12000.0</td>\n      <td>1997.0</td>\n      <td>Oxfam</td>\n      <td>Pay per use</td>\n      <td>27.0</td>\n      <td>Hand Pump</td>\n      <td>(-19.830951420391948, 26.650358442338003)</td>\n      <td>Not Functioning</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>WP004</td>\n      <td>Well</td>\n      <td>Clean</td>\n      <td>14.0</td>\n      <td>9000.0</td>\n      <td>1992.0</td>\n      <td>Oxfam</td>\n      <td>Pay per use</td>\n      <td>32.0</td>\n      <td>NaN</td>\n      <td>(-22.335866062765565, 22.83485684389231)</td>\n      <td>Functioning</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>WP005</td>\n      <td>Lake</td>\n      <td>Clean</td>\n      <td>41.0</td>\n      <td>16000.0</td>\n      <td>2006.0</td>\n      <td>NaN</td>\n      <td>Pay per use</td>\n      <td>18.0</td>\n      <td>Hand Pump</td>\n      <td>(-21.099305692773278, 24.799143614430015)</td>\n      <td>Functioning</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n1. Categorical variables: Water Source Type, Water Quality, Funder, Payment Type, Pump Type, Functioning Status\n2. Integer: Installation Year, Water Pump Age, Distance to Nearest Town, Population Served\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nFinal_project.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 12 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Water Pump ID             4750 non-null   object \n 1   Water Source Type         4750 non-null   object \n 2   Water Quality             4750 non-null   object \n 3   Distance to Nearest Town  4750 non-null   float64\n 4   Population Served         4750 non-null   float64\n 5   Installation Year         4750 non-null   float64\n 6   Funder                    4750 non-null   object \n 7   Payment Type              4750 non-null   object \n 8   Water Pump Age            4750 non-null   float64\n 9   Pump Type                 4750 non-null   object \n 10  GPS Coordinates           4750 non-null   object \n 11  Functioning Status        4750 non-null   object \ndtypes: float64(4), object(8)\nmemory usage: 468.9+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nFinal_project.value_counts(\"Water Source Type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nWater Source Type\nLake        2377\nWell        1641\nRiver        578\nBorehole     154\nName: count, dtype: int64\n```\n:::\n:::\n\n\nWater Source has 4 categories\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nFinal_project.value_counts(\"Water Quality\")\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nWater Quality\nClean           4232\nContaminated     518\nName: count, dtype: int64\n```\n:::\n:::\n\n\nWater Source has 3 categories\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nFinal_project.value_counts(\"Funder\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nFunder\nRed Cross     1719\nOxfam         1417\nUSAID          705\nUNICEF         534\nWorld Bank     375\nName: count, dtype: int64\n```\n:::\n:::\n\n\nWater Source has 6 categories\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nFinal_project.value_counts(\"Payment Type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nPayment Type\nPay per use    3567\nFree           1183\nName: count, dtype: int64\n```\n:::\n:::\n\n\nWater Source has 3 categories\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nFinal_project.value_counts(\"Pump Type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nPump Type\nHand Pump         2470\nMotorized Pump    1832\nSolar Pump         448\nName: count, dtype: int64\n```\n:::\n:::\n\n\nWater Source has 4 categories\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nFinal_project.value_counts(\"Functioning Status\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nFunctioning Status\nNot Functioning    2793\nFunctioning        1957\nName: count, dtype: int64\n```\n:::\n:::\n\n\nWater Source has 3 categories\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# For numerical columns\n\nFinal_project.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Distance to Nearest Town</th>\n      <th>Population Served</th>\n      <th>Installation Year</th>\n      <th>Water Pump Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4750.000000</td>\n      <td>4750.000000</td>\n      <td>4750.000000</td>\n      <td>4750.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>33.605684</td>\n      <td>13020.210526</td>\n      <td>2005.122947</td>\n      <td>18.921895</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>14.203737</td>\n      <td>2974.803284</td>\n      <td>8.893727</td>\n      <td>8.881974</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-3.000000</td>\n      <td>2000.000000</td>\n      <td>1990.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>21.000000</td>\n      <td>11000.000000</td>\n      <td>1997.000000</td>\n      <td>11.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>35.000000</td>\n      <td>13000.000000</td>\n      <td>2005.000000</td>\n      <td>19.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>44.000000</td>\n      <td>15000.000000</td>\n      <td>2013.000000</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>76.000000</td>\n      <td>22000.000000</td>\n      <td>2020.000000</td>\n      <td>34.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n1. Should we convert to Ineger?\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Display missing values count for each column\nFinal_project.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nWater Pump ID               250\nWater Source Type           250\nWater Quality               250\nDistance to Nearest Town    250\nPopulation Served           250\nInstallation Year           250\nFunder                      250\nPayment Type                250\nWater Pump Age              250\nPump Type                   250\nGPS Coordinates             250\nFunctioning Status          250\ndtype: int64\n```\n:::\n:::\n\n\nA. Handle missing values\n\n1. categorical_columns: Water Source Type, Water Quality, Funder, Payment Type, Pump Type, Functioning Status filled with mode\n2. numerical_columns: Distance to Nearest Town, Population Served, Installation Year, Water Pump Age filed with the median\n3. Dropped columns Water Pump ID and GPS Coordinates\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Fill categorical columns with the mode\ncategorical_columns = ['Water Source Type', 'Water Quality', 'Funder', 'Payment Type', 'Pump Type', 'Functioning Status']\n\nfor column in categorical_columns:\n    Final_project[column] = Final_project[column].fillna(Final_project[column].mode()[0])\n\n# Fill numerical columns with the median\nnumerical_columns = ['Distance to Nearest Town', 'Population Served', 'Installation Year', 'Water Pump Age']\n\nfor column in numerical_columns:\n    Final_project[column] = Final_project[column].fillna(Final_project[column].median())\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# to drop columns Water Pump ID and GPS Coordinates: Do they add value to the dataset?\nFinal_project_clean = Final_project.drop(columns=['Water Pump ID', 'GPS Coordinates'])\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nFinal_project_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 10 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Water Source Type         5000 non-null   object \n 1   Water Quality             5000 non-null   object \n 2   Distance to Nearest Town  5000 non-null   float64\n 3   Population Served         5000 non-null   float64\n 4   Installation Year         5000 non-null   float64\n 5   Funder                    5000 non-null   object \n 6   Payment Type              5000 non-null   object \n 7   Water Pump Age            5000 non-null   float64\n 8   Pump Type                 5000 non-null   object \n 9   Functioning Status        5000 non-null   object \ndtypes: float64(4), object(6)\nmemory usage: 390.8+ KB\n```\n:::\n:::\n\n\nData types\n1. Convert to string: Water Source Type, Water Quality, Funder, Payment Type, Pump Type, Functioning Status\n2. Convert to Integer Installation Year, Water Pump Age, Distance to Nearest Town, Population Served? \n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Convert data types to strings\nFinal_project_clean['Water Source Type'] = Final_project_clean['Water Source Type'].astype('category')\nFinal_project_clean['Water Quality'] = Final_project_clean['Water Quality'].astype('category')\nFinal_project_clean['Funder'] = Final_project_clean['Funder'].astype('category')\nFinal_project_clean['Payment Type'] = Final_project_clean['Payment Type'].astype('category')\nFinal_project_clean['Pump Type'] = Final_project_clean['Pump Type'].astype('category')\nFinal_project_clean['Functioning Status'] = Final_project_clean['Functioning Status'].astype('category')\n```\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Convert data types to Integer: Installation Year, Water Pump Age, Distance to Nearest Town, Population Served\nFinal_project_clean['Installation Year'] = Final_project_clean['Installation Year'].astype('int')\nFinal_project_clean['Water Pump Age'] = Final_project_clean['Water Pump Age'].astype('int')\nFinal_project_clean['Distance to Nearest Town'] = Final_project_clean['Distance to Nearest Town'].astype('int')\nFinal_project_clean['Population Served'] = Final_project_clean['Population Served'].astype('int')\n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nFinal_project_clean.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5000 entries, 0 to 4999\nData columns (total 10 columns):\n #   Column                    Non-Null Count  Dtype   \n---  ------                    --------------  -----   \n 0   Water Source Type         5000 non-null   category\n 1   Water Quality             5000 non-null   category\n 2   Distance to Nearest Town  5000 non-null   int64   \n 3   Population Served         5000 non-null   int64   \n 4   Installation Year         5000 non-null   int64   \n 5   Funder                    5000 non-null   category\n 6   Payment Type              5000 non-null   category\n 7   Water Pump Age            5000 non-null   int64   \n 8   Pump Type                 5000 non-null   category\n 9   Functioning Status        5000 non-null   category\ndtypes: category(6), int64(4)\nmemory usage: 186.6 KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nFinal_project_clean.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Water Source Type</th>\n      <th>Water Quality</th>\n      <th>Distance to Nearest Town</th>\n      <th>Population Served</th>\n      <th>Installation Year</th>\n      <th>Funder</th>\n      <th>Payment Type</th>\n      <th>Water Pump Age</th>\n      <th>Pump Type</th>\n      <th>Functioning Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Well</td>\n      <td>Clean</td>\n      <td>44</td>\n      <td>13000</td>\n      <td>2006</td>\n      <td>World Bank</td>\n      <td>Free</td>\n      <td>18</td>\n      <td>Motorized Pump</td>\n      <td>Functioning</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lake</td>\n      <td>Clean</td>\n      <td>13</td>\n      <td>13000</td>\n      <td>1990</td>\n      <td>Red Cross</td>\n      <td>Free</td>\n      <td>34</td>\n      <td>Hand Pump</td>\n      <td>Not Functioning</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lake</td>\n      <td>Clean</td>\n      <td>27</td>\n      <td>12000</td>\n      <td>1997</td>\n      <td>Oxfam</td>\n      <td>Pay per use</td>\n      <td>27</td>\n      <td>Hand Pump</td>\n      <td>Not Functioning</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Well</td>\n      <td>Clean</td>\n      <td>14</td>\n      <td>9000</td>\n      <td>1992</td>\n      <td>Oxfam</td>\n      <td>Pay per use</td>\n      <td>32</td>\n      <td>Hand Pump</td>\n      <td>Functioning</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lake</td>\n      <td>Clean</td>\n      <td>41</td>\n      <td>16000</td>\n      <td>2006</td>\n      <td>Red Cross</td>\n      <td>Pay per use</td>\n      <td>18</td>\n      <td>Hand Pump</td>\n      <td>Functioning</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nCategorical Values\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nFinal_project_clean.value_counts(\"Water Source Type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nWater Source Type\nLake        2627\nWell        1641\nRiver        578\nBorehole     154\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nFinal_project_clean.value_counts(\"Water Quality\")\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nWater Quality\nClean           4482\nContaminated     518\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nFinal_project_clean.value_counts(\"Funder\")\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nFunder\nRed Cross     1969\nOxfam         1417\nUSAID          705\nUNICEF         534\nWorld Bank     375\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nFinal_project_clean.value_counts(\"Payment Type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nPayment Type\nPay per use    3817\nFree           1183\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nFinal_project_clean.value_counts(\"Pump Type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nPump Type\nHand Pump         2720\nMotorized Pump    1832\nSolar Pump         448\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nFinal_project_clean.value_counts(\"Functioning Status\")\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nFunctioning Status\nNot Functioning    3043\nFunctioning        1957\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# For numerical columns\n\n\nFinal_project_clean.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Distance to Nearest Town</th>\n      <th>Population Served</th>\n      <th>Installation Year</th>\n      <th>Water Pump Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5000.000000</td>\n      <td>5000.000000</td>\n      <td>5000.000000</td>\n      <td>5000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>33.675400</td>\n      <td>13019.200000</td>\n      <td>2005.116800</td>\n      <td>18.925800</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>13.847353</td>\n      <td>2899.467665</td>\n      <td>8.668529</td>\n      <td>8.657048</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-3.000000</td>\n      <td>2000.000000</td>\n      <td>1990.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>22.000000</td>\n      <td>11000.000000</td>\n      <td>1998.000000</td>\n      <td>12.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>35.000000</td>\n      <td>13000.000000</td>\n      <td>2005.000000</td>\n      <td>19.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>44.000000</td>\n      <td>15000.000000</td>\n      <td>2012.000000</td>\n      <td>26.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>76.000000</td>\n      <td>22000.000000</td>\n      <td>2020.000000</td>\n      <td>34.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Range: Min & Max\n\n**Distance to Nearest Town**: Min: -3.0 Max: 76.0,\n**Population Served**: Min: 2000.0 Max: 22000.0, \n**Installation Year**: Min: 1990.0 Max: 2020.0,\n**Water Pump Age**: Min: 4.0 Max: 34.0\n\n**Note:** The Distance to Nearest Town has an **invalid values of -3.0**, which is not feasible for a geographic distance. \nThis will require **data cleaning** to remove or correct the invalid entry.\n\n\nSkewness Analysis: Mean vs. Median\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nnumerical_columns = ['Distance to Nearest Town', 'Population Served', 'Installation Year', 'Water Pump Age']\n\nfor col in numerical_columns:\n    mean_val = Final_project_clean[col].mean()\n    median_val = Final_project_clean[col].median()\n    print(f\"{col}: Mean = {mean_val:.2f}, Median = {median_val:.2f}\")\n    if mean_val > median_val:\n        print(f\"{col} appears to be **right-skewed** (mean > median)\\n\")\n    elif mean_val < median_val:\n        print(f\"{col} appears to be **left-skewed** (mean < median)\\n\")\n    else:\n        print(f\"{col} appears to be **symmetric** (mean ≈ median)\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDistance to Nearest Town: Mean = 33.68, Median = 35.00\nDistance to Nearest Town appears to be **left-skewed** (mean < median)\n\nPopulation Served: Mean = 13019.20, Median = 13000.00\nPopulation Served appears to be **right-skewed** (mean > median)\n\nInstallation Year: Mean = 2005.12, Median = 2005.00\nInstallation Year appears to be **right-skewed** (mean > median)\n\nWater Pump Age: Mean = 18.93, Median = 19.00\nWater Pump Age appears to be **left-skewed** (mean < median)\n\n```\n:::\n:::\n\n\n## Skewness Analysis: Mean vs. Median: Are the vaiables skewed\n\n- **Population Served**: Mean = 13019.2, Median = 13000  \n  This suggests that the distribution is approximately **symmetric**.\n\n- **Distance to Nearest Town**: Mean = 33.7, Median = 35  \n  This indicates a slight **left skew**, potentially due to the invalid `-3` value, which will be addressed during data cleaning.\n\n- **Installation Year**: Mean = 2005.1, Median = 2005  \n  This distribution is approximately **symmetric**.\n\n- **Water Pump Age**: Mean = 18.9, Median = 19  \n  This distribution is approximately **symmetric**.\n\n### Summary\nThe skewness analysis helps us identify whether each numerical variable has a balanced distribution or is influenced by **outliers** or **natural skewness** (e.g., older pumps might be rare, shifting the age distribution). This is important when choosing modeling techniques later.\n\nStandard Deviation\n***What Does Standard Deviation Tell You?***\n    \n* Low Standard Deviation: Data points are close to the mean (low spread).\n* High Standard Deviation: Data points are widely spread out from the mean.\n* Comparing the standard deviation to the mean gives a sense of relative spread.\n\n## Analysis of Spread: Standard Deviation\n\n### Distance to Nearest Town\n- Mean: 33.68 km\n- Standard Deviation: 13.85 km\n- Interpretation: There is **moderate spread** — some pumps are very close to towns, while others are quite far away. \n- This wide spread may affect accessibility and maintenance.\n\n### Population Served\n- Mean: 13019.2 people\n- Standard Deviation: 2899.47 people\n- Interpretation: There is a **large spread** in population served, indicating that some water points serve much larger communities \n- than others. This variance could impact pump wear and tear, water quality, and functionality.\n\n### Installation Year\n- Mean: 2005.12\n- Standard Deviation: 8.67 years\n- Interpretation: This is a **relatively low spread**, meaning most pumps were installed within a similar timeframe. This could indicate \n- consistent development efforts over time.\n\n### Water Pump Age\n- Mean: 18.93 years\n- Standard Deviation: 8.66 years\n- Interpretation: Pump age shows **moderate spread**, with some pumps significantly older than others. Older pumps may be more prone \n- to breakdowns, which could explain patterns seen in the `Functioning Status` if any.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nfor col in numerical_columns:\n    plt.figure(figsize=(8, 4))\n    sns.histplot(Final_project_clean[col], kde=True, bins=20)\n    plt.title(f'Distribution of {col}')\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-31-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-31-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-31-output-3.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-31-output-4.png){}\n:::\n:::\n\n\n## Distribution Analysis of Numerical Variables\n\nTo better understand the **spread and shape** of the numerical variables in the dataset, histograms with density curves (KDE) were generated for:\n\n- Distance to Nearest Town\n- Population Served\n- Installation Year\n- Water Pump Age\n\n### Observations\n\n- **Distance to Nearest Town**: \n    - The distribution appears roughly **bimodal**, indicating two distinct groups — pumps either located very close to towns, or much farther away.\n    - The presence of a negative distance (anomalous value) was also detected and will require data cleaning.\n\n- **Population Served**:\n    - The distribution is **slightly right-skewed**, meaning a small number of pumps serve very large populations compared to the majority.\n    - This skewness could indicate a few **outliers** — large water systems serving exceptionally large communities.\n\n- **Installation Year**:\n    - The data is **centered around the 2000s**, showing a peak in installations during that period.\n    - The distribution confirms that most pumps were installed between 1995 and 2015, aligning with global infrastructure development initiatives.\n\n- **Water Pump Age**:\n    - The age distribution is fairly **even**, but slightly skewed toward older pumps.\n    - This suggests that some pumps have been operational for much longer than others, potentially impacting their functionality.\n\n### Conclusion\n\nThese distributions provide valuable insight into the **data’s characteristics**, potential **outliers**, and **patterns** that could influence later analysis, such as clustering or modeling pump functionality.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# To detect outliers\nplt.figure(figsize=(12, 8))\nfor i, col in enumerate(numerical_columns, 1):\n    plt.subplot(2, 2, i)\n    sns.boxplot(x=Final_project_clean[col])\n    plt.title(f'Boxplot of {col}')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-32-output-1.png){}\n:::\n:::\n\n\n## Outlier Detection Using Boxplots\n\nBoxplots were generated for the numerical variables to **identify potential outliers** and analyze the spread of the data. \n\n### Observations:\n- **Distance to Nearest Town**:\n  - A negative value (-3) was detected, which is an invalid distance and will require data cleaning.\n  - There are a few high-distance values that might be legitimate but should be investigated.\n\n- **Population Served**:\n  - Some extreme values appear on the higher end, indicating that a few pumps serve significantly larger populations.\n  - This could be due to large-scale water distribution systems, but further investigation is needed to determine if these are **valid or data entry errors**.\n\n- **Installation Year**:\n  - No significant outliers detected. The values fall within a reasonable range (1990–2020), aligning with expected infrastructure development trends.\n\n- **Water Pump Age**:\n  - Some older pumps seem to be outliers, but given that pumps can remain operational for long periods, these might be valid.\n  - Further analysis could explore whether older pumps have a higher likelihood of **not functioning**.\n\n### Conclusion:\nIdentifying outliers is crucial for:\n1. **Data Cleaning** – Removing or correcting erroneous values (e.g., negative distances).\n2. **Feature Engineering** – Handling extreme values appropriately (e.g., winsorization or transformations).\n3. **Modeling Impact** – Deciding whether to retain or remove extreme values to improve analysis and predictions.\n\nOutliers will be further examined before proceeding with clustering and predictive analysis.\n\n\nCorrelation Between Numerical Variables\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nplt.figure(figsize=(8,6))\nsns.heatmap(Final_project_clean[numerical_columns].corr(), annot=True, cmap=\"coolwarm\", fmt=\".2f\")\nplt.title('Correlation Matrix of Numerical Variables')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-33-output-1.png){}\n:::\n:::\n\n\n## Correlation Analysis of Numerical Variables\n\nA **correlation matrix** was generated to examine the relationships between numerical variables. The heatmap visualizes the strength and direction of these correlations:\n\n### Key Observations:\n- **Water Pump Age vs. Installation Year**: Strong **negative correlation**  \n  - Older pumps correspond to earlier installation years, which is expected.\n  - This confirms that **Water Pump Age** is effectively derived from **Installation Year**.\n  \n- **Population Served vs. Distance to Nearest Town**: Weak correlation  \n  - No strong relationship observed, indicating that pumps serving large populations are not necessarily located farther or closer to towns.\n  \n- **Other Variables**: Low correlation values  \n  - Most numerical features in the dataset appear to be **weakly correlated**, meaning each provides distinct information.\n\n### Conclusion:\n- The **negative correlation between Installation Year and Water Pump Age** suggests **multicollinearity**, which might need to be addressed in predictive modeling.\n- **No highly correlated features** were found among `Distance to Nearest Town`, `Population Served`, and `Functioning Status`, indicating that these variables can contribute independently to further analysis (such as clustering or predictive modeling).\n\nIf you see correlation values:\n\nClose to +1 or -1 → Strong relationship\nBetween -0.3 and 0.3 → Weak or no relationship\nBetween 0.3 and 0.7 → Moderate relationship\n\nTrends over time for installation Year\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nsns.scatterplot(data=Final_project_clean, x='Installation Year', y='Population Served', hue='Functioning Status')\nplt.title('Population Served Over Time')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-34-output-1.png){}\n:::\n:::\n\n\n## Population Served Over Time by Functioning Status\n\nA scatterplot was generated to examine the relationship between **Installation Year** and **Population Served**, with the data points color-coded by the pump’s **Functioning Status**.\n\n### Key Observations:\n- There is **no clear trend** indicating that newer installations consistently serve larger populations.\n- Both **functioning and non-functioning pumps** are distributed across all installation years and population sizes.\n- However, older installations (pre-2000) show a slightly **higher proportion of non-functioning pumps**, indicating that **age of the pump** could be contributing to functionality issues.\n- The population served ranges widely across all installation years, with some pumps serving very large populations regardless of installation date.\n\n### Conclusion:\nThis plot helps highlight that **functioning status may be weakly related to installation year** — older pumps appear slightly more prone to failure. However, population size alone does not appear to be a strong driver of functionality issues. This insight can guide further exploration, such as analyzing pump type, water source, or payment type in relation to functioning status.\n\nCheck Relationships to Functioning Status\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nfor col in numerical_columns:\n    plt.figure(figsize=(8, 4))\n    sns.boxplot(data=Final_project_clean, x='Functioning Status', y=col)\n    plt.title(f'{col} vs Functioning Status')\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-35-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-35-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-35-output-3.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-35-output-4.png){}\n:::\n:::\n\n\n## Numerical Variables vs. Functioning Status\n\nBoxplots were created to explore the relationship between each **numerical variable** and the **functioning status** of the water pumps. This helps identify whether certain numerical characteristics (e.g., age, population served, distance to town) differ between **functioning** and **non-functioning** pumps.\n\n### Key Observations\n\n- **Distance to Nearest Town vs. Functioning Status**:\n    - Functioning and non-functioning pumps have fairly similar distance distributions.\n    - This suggests that **distance to the nearest town may not have a strong influence** on functionality.\n\n- **Population Served vs. Functioning Status**:\n    - Non-functioning pumps show a slightly wider spread in population served, indicating that pumps serving **larger populations** could face more stress or maintenance challenges.\n    - However, the median population served is very similar between the two groups, meaning this is not a strong driver on its own.\n\n- **Installation Year vs. Functioning Status**:\n    - Non-functioning pumps tend to have slightly earlier installation years, aligning with the hypothesis that **older pumps are more likely to fail**.\n    - However, non-functioning pumps exist across all installation years, meaning age alone does not fully explain pump failure.\n\n- **Water Pump Age vs. Functioning Status**:\n    - Non-functioning pumps are **generally older**, with a higher median age compared to functioning pumps.\n    - This supports the idea that **older pumps are at greater risk of failure**, likely due to wear and tear over time.\n\n### Conclusion\n\n- **Water Pump Age** appears to have the **strongest relationship** with functionality, reinforcing the importance of **preventative maintenance and timely replacements**.\n- Other numerical variables like **Distance to Nearest Town** and **Population Served** show **weaker or inconsistent relationships** with functioning status, suggesting that non-numeric factors (like pump type, water source type, or funder practices) may play a larger role in functionality.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nFinal_project_clean.to_csv('Final_project_clean.csv', index=False)\n```\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.histplot(data=Final_project_clean, x=\"Distance to Nearest Town\", binwidth=10)\n\n\nnumerical_columns = ['Distance to Nearest Town', 'Population Served', 'Installation Year', 'Water Pump Age']\n```\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-37-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nsns.histplot(data=Final_project_clean, x=\"Population Served\", binwidth=200)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n<Axes: xlabel='Population Served', ylabel='Count'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-38-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nsns.histplot(data=Final_project_clean, x=\"Installation Year\", binwidth=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n<Axes: xlabel='Installation Year', ylabel='Count'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-39-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nsns.histplot(data=Final_project_clean, x=\"Water Pump Age\", binwidth=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n<Axes: xlabel='Water Pump Age', ylabel='Count'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-40-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nsns.boxplot(data=Final_project_clean, x=\"Distance to Nearest Town\")\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n<Axes: xlabel='Distance to Nearest Town'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-41-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nsns.boxplot(data=Final_project_clean, x=\"Population Served\")\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n<Axes: xlabel='Population Served'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-42-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nsns.boxplot(data=Final_project_clean, x=\"Installation Year\")\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n<Axes: xlabel='Installation Year'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-43-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nsns.boxplot(data=Final_project_clean, x=\"Water Pump Age\")\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n<Axes: xlabel='Water Pump Age'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python-projects-4_files/figure-html/cell-44-output-2.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "python-projects-4_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}